// Generated by CoffeeScript 1.3.1
var Canvas, CanvasController, CanvasView, Circle, CursorPoint, JSONable, Line, Point, PointTest, Shape,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Canvas = (function() {

  Canvas.name = 'Canvas';

  function Canvas() {
    this.shapes = [];
  }

  Canvas.prototype.clear = function() {
    return this.shapes = [];
  };

  Canvas.prototype.addShape = function(shape) {
    return this.shapes.push(shape);
  };

  Canvas.fromJSON = function(json_string) {
    var canvas, json, shape, _i, _len, _ref;
    json = JSON.parse(json_string);
    canvas = new this;
    _ref = json.shapes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      shape = _ref[_i];
      switch (shape.type) {
        case "Circle":
          canvas.addShape(Circle.fromJSON(shape));
          break;
        case "Line":
          canvas.addShape(Line.fromJSON(shape));
      }
    }
    return canvas;
  };

  Canvas.boat = '{"shapes":[{"points":[{"x":5,"y":592},{"x":795,"y":593}],"color":"#0000FF","type":"Line"},{"points":[{"x":8,"y":586},{"x":795,"y":588}],"color":"#0000FF","type":"Line"},{"points":[{"x":7,"y":581},{"x":793,"y":584}],"color":"#0000FF","type":"Line"},{"points":[{"x":10,"y":577},{"x":793,"y":580}],"color":"#0000FF","type":"Line"},{"points":[{"x":791,"y":576},{"x":11,"y":574}],"color":"#0000FF","type":"Line"},{"points":[{"x":11,"y":570},{"x":793,"y":574}],"color":"#0000FF","type":"Line"},{"points":[{"x":12,"y":568},{"x":790,"y":570}],"color":"#0000FF","type":"Line"},{"points":[{"x":790,"y":566},{"x":11,"y":565}],"color":"#0000FF","type":"Line"},{"points":[{"x":11,"y":560},{"x":788,"y":562}],"color":"#0000FF","type":"Line"},{"points":[{"x":789,"y":558},{"x":13,"y":556}],"color":"#0000FF","type":"Line"},{"points":[{"x":13,"y":549},{"x":789,"y":554}],"color":"#0000FF","type":"Line"},{"points":[{"x":789,"y":546},{"x":19,"y":544}],"color":"#0000FF","type":"Line"},{"points":[{"x":17,"y":539},{"x":788,"y":542}],"color":"#0000FF","type":"Line"},{"points":[{"x":54,"y":406},{"x":103,"y":537}],"color":"#000000","type":"Line"},{"points":[{"x":102,"y":537},{"x":681,"y":538}],"color":"#000000","type":"Line"},{"points":[{"x":681,"y":538},{"x":742,"y":407}],"color":"#000000","type":"Line"},{"points":[{"x":742,"y":407},{"x":55,"y":412}],"color":"#000000","type":"Line"},{"points":[{"x":395,"y":409},{"x":390,"y":85}],"color":"#000000","type":"Line"},{"points":[{"x":399,"y":89},{"x":404,"y":410}],"color":"#000000","type":"Line"},{"points":[{"x":396,"y":91},{"x":404,"y":407}],"color":"#854700","type":"Line"},{"points":[{"x":394,"y":92},{"x":399,"y":413}],"color":"#854700","type":"Line"},{"points":[{"x":394,"y":93},{"x":398,"y":407}],"color":"#854700","type":"Line"},{"points":[{"x":397,"y":88},{"x":402,"y":404}],"color":"#854700","type":"Line"},{"points":[{"x":391,"y":103},{"x":267,"y":101}],"color":"#B00000","type":"Line"},{"points":[{"x":267,"y":101},{"x":269,"y":268}],"color":"#B00000","type":"Line"},{"points":[{"x":269,"y":267},{"x":395,"y":264}],"color":"#B00000","type":"Line"},{"points":[{"x":269,"y":103},{"x":391,"y":263}],"color":"#B00000","type":"Line"},{"points":[{"x":270,"y":269},{"x":389,"y":107}],"color":"#B00000","type":"Line"},{"points":[{"x":626,"y":473},{"x":668,"y":487}],"color":"#17AAFF","type":"Circle"},{"points":[{"x":516,"y":474},{"x":566,"y":478}],"color":"#17AAFF","type":"Circle"},{"points":[{"x":396,"y":476},{"x":456,"y":472}],"color":"#17AAFF","type":"Circle"},{"points":[{"x":281,"y":476},{"x":330,"y":476}],"color":"#17AAFF","type":"Circle"},{"points":[{"x":175,"y":474},{"x":226,"y":477}],"color":"#17AAFF","type":"Circle"}]}';

  return Canvas;

})();

CanvasView = (function() {

  CanvasView.name = 'CanvasView';

  function CanvasView(canvas_element_id) {
    this.put_pixel = __bind(this.put_pixel, this);
    this.canvas = $("#" + canvas_element_id);
    this.ctx = this.canvas[0].getContext("2d");
    this.height = this.canvas.attr("height");
    this.width = this.canvas.attr("width");
  }

  CanvasView.prototype.put_pixel = function(p1) {
    return this.ctx.fillRect(p1.x, p1.y, 1, 1);
  };

  CanvasView.prototype.render = function(shapes) {
    var shape, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = shapes.length; _i < _len; _i++) {
      shape = shapes[_i];
      this.ctx.fillStyle = shape.color;
      _results.push(shape.render(this.put_pixel));
    }
    return _results;
  };

  CanvasView.prototype.clear = function() {
    return this.ctx.clearRect(0, 0, this.canvas[0].width, this.canvas[0].height);
  };

  CanvasView.prototype.update_coordinates = function(e) {
    var x, y;
    x = e.pageX - this.offsetLeft;
    y = e.pageY - this.offsetTop;
    return $("#coordinates").html(y + " ," + x);
  };

  return CanvasView;

})();

CanvasController = (function() {

  CanvasController.name = 'CanvasController';

  function CanvasController(model, view) {
    var _this = this;
    this.model = model;
    this.view = view;
    this.reflection = __bind(this.reflection, this);

    this.canvas_clear = __bind(this.canvas_clear, this);

    this.canvas_mouseup = __bind(this.canvas_mouseup, this);

    this.color_pick = __bind(this.color_pick, this);

    this.canvas_mousedown = __bind(this.canvas_mousedown, this);

    this.json_keyup = __bind(this.json_keyup, this);

    this.boat_click = __bind(this.boat_click, this);

    this.undo_click = __bind(this.undo_click, this);

    this.point_stack = [];
    this.active_button = null;
    this.view.canvas.bind("mousemove", this.view.update_coordinates);
    this.view.canvas.bind("click", this.canvas_click);
    this.view.canvas.bind("mousedown", this.canvas_mousedown);
    this.view.canvas.bind("mouseup", this.canvas_mouseup);
    $("#reflection-x").bind("click", function() {
      return _this.reflection("x");
    });
    $("#reflection-y").bind("click", function() {
      return _this.reflection("y");
    });
    $("#clear").bind("click", this.canvas_clear);
    $("input.color").bind("change", this.color_pick);
    $("#undo").bind("click", this.undo_click);
    $("#boat").bind("click", this.boat_click);
    $("#json").bind("keyup", this.json_keyup);
    this.bind_menubar_buttons();
    this.draggable_actions = [$("#translation")[0], $("#line")[0], $("#circle")[0], $("#scaling")[0], $("#rotation")[0], $("#shearing-x")[0], $("#shearing-y")[0]];
  }

  CanvasController.prototype.bind_menubar_buttons = function() {
    var _this = this;
    return $("#menubar > button").each(function(index, element) {
      return $(element).click(function(e) {
        _this.active_button = e.target;
        return _this.point_stack = [];
      });
    });
  };

  CanvasController.prototype.refresh = function() {
    this.view.clear();
    this.view.render(this.model.shapes);
    return $("#json").val(JSON.stringify(this.model));
  };

  CanvasController.prototype.undo_click = function() {
    var point, shape, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.model.shapes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      shape = _ref[_i];
      _ref1 = shape.points;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        point = _ref1[_j];
        point.undo();
      }
    }
    return this.refresh();
  };

  CanvasController.prototype.boat_click = function() {
    $("#json").val(Canvas.boat);
    return this.json_keyup();
  };

  CanvasController.prototype.json_keyup = function() {
    this.model = Canvas.fromJSON($("#json").val());
    this.view.clear();
    return this.view.render(this.model.shapes);
  };

  CanvasController.prototype.canvas_mousedown = function(e) {
    var _ref;
    if (_ref = this.active_button, __indexOf.call(this.draggable_actions, _ref) >= 0) {
      return this.point_stack.push(new CursorPoint(e));
    }
  };

  CanvasController.prototype.color_pick = function(e) {
    return Shape.color = "#" + e.target.value;
  };

  CanvasController.prototype.canvas_mouseup = function(e) {
    var dx, dy, p1, p2, point, shape, theta, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (_ref = this.active_button, __indexOf.call(this.draggable_actions, _ref) >= 0) {
      this.point_stack.push(new CursorPoint(e));
      if (this.point_stack.length === 2) {
        p2 = this.point_stack.pop();
        p1 = this.point_stack.pop();
        dx = p2.x - p1.x;
        dy = p2.y - p1.y;
        switch (this.active_button) {
          case $("#line")[0]:
            this.model.addShape(new Line([p1, p2]));
            break;
          case $("#circle")[0]:
            this.model.addShape(new Circle([p1, p2]));
            break;
          case $("#translation")[0]:
            _ref1 = this.model.shapes;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              shape = _ref1[_i];
              _ref2 = shape.points;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                point = _ref2[_j];
                point.translate(dx, dy);
              }
            }
            break;
          case $("#scaling")[0]:
            _ref3 = this.model.shapes;
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              shape = _ref3[_k];
              _ref4 = shape.points;
              for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
                point = _ref4[_l];
                point.scale(1 + dx / this.view.width, 1 + dy / this.view.height);
              }
            }
            break;
          case $("#rotation")[0]:
            theta = -Math.atan(dy / dx);
            _ref5 = this.model.shapes;
            for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
              shape = _ref5[_m];
              _ref6 = shape.points;
              for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
                point = _ref6[_n];
                point.pivot_rotate(theta, p1);
              }
            }
            break;
          case $("#shearing-x")[0]:
            _ref7 = this.model.shapes;
            for (_o = 0, _len6 = _ref7.length; _o < _len6; _o++) {
              shape = _ref7[_o];
              _ref8 = shape.points;
              for (_p = 0, _len7 = _ref8.length; _p < _len7; _p++) {
                point = _ref8[_p];
                if (dx !== 0) {
                  point.shear("x", dx / this.view.width);
                }
              }
            }
            break;
          case $("#shearing-y")[0]:
            _ref9 = this.model.shapes;
            for (_q = 0, _len8 = _ref9.length; _q < _len8; _q++) {
              shape = _ref9[_q];
              _ref10 = shape.points;
              for (_r = 0, _len9 = _ref10.length; _r < _len9; _r++) {
                point = _ref10[_r];
                if (dy !== 0) {
                  point.shear("y", dy / this.view.height);
                }
              }
            }
        }
        return this.refresh();
      }
    }
  };

  CanvasController.prototype.canvas_clear = function() {
    this.model.clear();
    this.view.clear();
    return $("#json").val("");
  };

  CanvasController.prototype.reflection = function(axis) {
    var canvas_max_point, point, shape, _i, _j, _len, _len1, _ref, _ref1;
    canvas_max_point = new Point(this.view.width, this.view.height);
    _ref = this.model.shapes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      shape = _ref[_i];
      _ref1 = shape.points;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        point = _ref1[_j];
        point.reflect(axis, canvas_max_point);
      }
    }
    return this.refresh();
  };

  return CanvasController;

})();

Point = (function() {

  Point.name = 'Point';

  function Point(x, y) {
    this.x = x;
    this.y = y;
  }

  Point.fromJSON = function(json) {
    return new Point(json.x, json.y);
  };

  Point.prototype.equals = function(point) {
    if (this.x === point.x && this.y === point.y) {
      return true;
    } else {
      return false;
    }
  };

  Point.prototype.distance = function(another_point) {
    var dx, dy;
    dx = another_point.x - this.x;
    dy = another_point.y - this.y;
    return Math.round(Math.sqrt(dx * dx + dy * dy));
  };

  Point.prototype.translate = function(Tx, Ty) {
    this.x += Tx;
    this.y += Ty;
    return this.undo = function() {
      return this.translate(-Tx, -Ty);
    };
  };

  Point.prototype.scale = function(Sx, Sy) {
    this.x *= Sx;
    this.y *= Sy;
    return this.undo = function() {
      return this.scale(1 / Sx, 1 / Sy);
    };
  };

  Point.prototype.rotate = function(theta) {
    this.x = this.x * Math.cos(theta) - this.y * Math.sin(theta);
    this.y = this.x * Math.sin(theta) + this.y * Math.cos(theta);
    return this.undo = function() {
      return this.rotate(-theta);
    };
  };

  Point.prototype.pivot_rotate = function(theta, pivot) {
    var p;
    theta = -theta;
    p = new Point((this.x - pivot.x) * Math.cos(theta) - (this.y - pivot.y) * Math.sin(theta) + pivot.x, (this.x - pivot.x) * Math.sin(theta) + (this.y - pivot.y) * Math.cos(theta) + pivot.y);
    this.x = p.x;
    this.y = p.y;
    return this.undo = function() {
      return this.pivot_rotate(theta, pivot);
    };
  };

  Point.prototype.reflect = function(axis, canvas_max_point) {
    switch (axis) {
      case "x":
        this.y = canvas_max_point.y - this.y;
        break;
      case "y":
        this.x = canvas_max_point.x - this.x;
    }
    return this.undo = function() {
      return this.reflect(axis, canvas_max_point);
    };
  };

  Point.prototype.shear = function(axis, k) {
    switch (axis) {
      case "x":
        this.x += k * this.y;
        break;
      case "y":
        this.y += k * this.x;
    }
    return this.undo = function() {
      return this.shear(axis, -k);
    };
  };

  return Point;

})();

CursorPoint = (function(_super) {

  __extends(CursorPoint, _super);

  CursorPoint.name = 'CursorPoint';

  function CursorPoint(e) {
    CursorPoint.__super__.constructor.call(this, e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);
  }

  return CursorPoint;

})(Point);

JSONable = (function() {

  JSONable.name = 'JSONable';

  function JSONable() {
    this.type = this.constructor.name;
  }

  return JSONable;

})();

Shape = (function(_super) {

  __extends(Shape, _super);

  Shape.name = 'Shape';

  function Shape(points, color) {
    this.points = points;
    this.color = color != null ? color : "#000000";
    this.color = Shape.color;
    Shape.__super__.constructor.apply(this, arguments);
  }

  Shape.color = "#000000";

  Shape.fromJSON = function(json) {
    Shape.color = json.color;
    return new this([Point.fromJSON(json.points[0]), Point.fromJSON(json.points[1])]);
  };

  return Shape;

})(JSONable);

Line = (function(_super) {

  __extends(Line, _super);

  Line.name = 'Line';

  function Line() {
    return Line.__super__.constructor.apply(this, arguments);
  }

  Line.prototype.render = function(draw_pixel_callback) {
    var dx, dy, e2, err, p0, p1, sx, sy, _results;
    p0 = new Point(this.points[0].x, this.points[0].y);
    p1 = new Point(this.points[1].x, this.points[1].y);
    p0.x = Math.round(p0.x);
    p0.y = Math.round(p0.y);
    p1.x = Math.round(p1.x);
    p1.y = Math.round(p1.y);
    dx = Math.abs(p1.x - p0.x);
    sx = p0.x < p1.x ? 1 : -1;
    dy = -Math.abs(p1.y - p0.y);
    sy = p0.y < p1.y ? 1 : -1;
    err = dx + dy;
    _results = [];
    while (true) {
      draw_pixel_callback(new Point(p0.x, p0.y));
      if (p0.x === p1.x && p0.y === p1.y) {
        break;
      }
      e2 = 2 * err;
      if (e2 >= dy) {
        err += dy;
        p0.x += sx;
      }
      if (e2 <= dx) {
        err += dx;
        _results.push(p0.y += sy);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Line;

})(Shape);

Circle = (function(_super) {

  __extends(Circle, _super);

  Circle.name = 'Circle';

  function Circle() {
    return Circle.__super__.constructor.apply(this, arguments);
  }

  Circle.prototype.render = function(draw_pixel_callback) {
    var block, center, err, perimeter, r, x, y, _results;
    center = this.points[0];
    perimeter = this.points[1];
    r = Math.sqrt(Math.pow(perimeter.x - center.x, 2) + Math.pow(perimeter.y - center.y, 2));
    x = -r;
    y = 0;
    err = 2 - 2 * r;
    block = function() {
      draw_pixel_callback(new Point(center.x - x, center.y + y));
      draw_pixel_callback(new Point(center.x - y, center.y - x));
      draw_pixel_callback(new Point(center.x + x, center.y - y));
      draw_pixel_callback(new Point(center.x + y, center.y + x));
      r = err;
      if (r > x) {
        err += ++x * 2 + 1;
      }
      if (r <= y) {
        return err += ++y * 2 + 1;
      }
    };
    _results = [];
    while (x < 0) {
      _results.push(block());
    }
    return _results;
  };

  return Circle;

})(Shape);

PointTest = (function() {

  PointTest.name = 'PointTest';

  function PointTest() {
    var test, _i, _len, _ref;
    _ref = [this.distance, this.pivot_rotate, this.equals, this.shear, this.reflect, this.undo];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      test = _ref[_i];
      test();
    }
  }

  PointTest.prototype.distance = function() {
    var p1, p2;
    p1 = new Point(100, 100);
    p2 = new Point(300, 300);
    if (p1.distance(p2) !== 283) {
      return console.log("Failed test - distance");
    }
  };

  PointTest.prototype.pivot_rotate = function() {
    var d1, p, p1, p2, _i, _len, _ref;
    p1 = new Point(100, 100);
    p2 = new Point(300, 100);
    d1 = p1.distance(p2);
    _ref = [p1, p2];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.pivot_rotate(-Math.PI / 4, p1);
    }
    if (p1.distance(p2) !== d1) {
      return console.log("Failed test - pivot_rotate");
    }
  };

  PointTest.prototype.shear = function() {
    var point, points, _i, _len;
    points = [new Point(0, 0), new Point(100, 0), new Point(0, 50), new Point(100, 50)];
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      point = points[_i];
      point.shear("x", 0.2);
    }
    if (!points[0].equals(new Point(0, 0)) || !points[1].equals(new Point(100, 0)) || !points[2].equals(new Point(10, 50)) || !points[3].equals(new Point(110, 50))) {
      return console.log("failed test - shear");
    }
  };

  PointTest.prototype.equals = function() {
    var p1, p2;
    p1 = new Point(1, 2);
    p2 = new Point(3, 4);
    if (!(p1.equals(p1)) || p1.equals(p2)) {
      return console.log("failed test - equals");
    }
  };

  PointTest.prototype.reflect = function() {
    var error, p1, p2;
    p1 = new Point(200, 300);
    p1.reflect("y", new Point(800, 600));
    p2 = new Point(600, 300);
    if (p1.equals(p2) !== true) {
      return error = "failed test - shear x";
    }
  };

  PointTest.prototype.undo = function() {
    var p1, p2;
    p1 = new Point(100, 100);
    p2 = new Point(100, 100);
    p1.translate(10, 10);
    p1.undo();
    if (!(p1.equals(p2))) {
      return console.log("failed test - undo translate");
    }
  };

  return PointTest;

})();

$(function() {
  var canvasApp, test;
  canvasApp = new CanvasController(new Canvas, new CanvasView("canvas"));
  test = new PointTest;
  return canvasApp.view.render(canvasApp.model.shapes);
});
